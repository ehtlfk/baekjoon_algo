정렬알고리즘
 - 사실 python을 쓰면 알아서 정렬해주어서 매우 편함, 다른 언어일 경우 해당 라이브러리나 직접 구현할 수 있는 배경 지식 필요

DP 문제
 - 작은 거에서 큰 거로

트리 순환
 - 해당 개념 좀 정리

문자열
 - '+' 쓰지마라

순열 조합 부분집합
 - 만들 수 있는 방법이 매우 많으므로 잘 정리해놓는 것이 중요

성능이 안나오면 log n이다, 
초기화 잊지말고, 

pop 을 할때 항상 조건으로 empty를 확인하자
출력을 리스트가 아닌 주어진 조건으로 하는 것을 잊지 말자
from collections import deque

while문을 쓸 때 맨날 마지막 남은 값을 더하지 않는다. 조건을 사이값이 아닌 마지막값을 기준으로 해야하나? => prev index에 값을 더해서 해결할 수 있음
dfs 시 dfsALL하는 것을 잊지말자

대충 100넘어가면 bfs다,
bfs로 카운트하려면 visit배열을 이용해서 카운트하자, deque 초기화는 deque([]) 꼴이다
bfs에 queue에 중복이 될 수가 있다. while문 밑에 visited를 표시하면, 겹쳐있는 친구들이 중복될 수 있음, 그러므로 queue에 넣을 때 visited에 추가하자
제발 mat는 무조건 복사하자, 원본을 손상시키지 말자 !!!!!!!


python zip은 zip(v[0],v[1],v[2]) 꼴로 풀어야한다, 즉 두 개 이상의 배열을 함께 돌릴 때 좋다.


순열과 조합 확실하게, 생각해보니 recursion 넘는다.
from itertools import combninations
combinations(range(),K), K가 len(range)보다 작아야됨, 크면 빈행렬 리턴


변수명은 배열일 경우 3글자 정도로 하자, 반복문 할당할때 문제 발생
등호 표기를 정확하게 포함하는지 안하는지, D>0 으로 가능한한 유도, 주체를 잘 결정
그리고 그 사방면으로 퍼지는 거 수식 있을텐데...
문제를 안다고 해서 대충 읽지 말자, 어떤 알고리즘을 쓸지 정하고 구체적으로 정답이 나오는지를 생각해보자


sort 함수 lambda 키 2개 s = sorted(s, key = lambda x: (x[1], x[2])), 만약 두 조건의 정렬 순서가 반대면, x[1],-x[2] 숫자일 경우 가능 !!!!



아스키 코드 ord(), chr()

for each, for index를 구분해서 변수가 index인지, val인지를 구분하자 s[i], i 로 답이 왜 틀렸는지 고민하고 있었다.




비트마스크와 정규표현식
비트마스크와 배열 idx에서, idx가 0,1,2,3이면 1 << 0, 1<<p 형태로 shift를 이용해서 하면 된다. 배열의 순서와 비트마스크의 순서가 반대라는 것을 기억 배열은 왼쪽에서 오른쪽, 비트는 오른쪽에서 왼쪽



분할정복은 divide, merge, base case로 나뉜다.   

복잡한 반복문을 재귀호출로 간단하게 바꿀 수 있다. 코드가 간결해지므로 실수가 준다. 하지만 메모이제이션 해줘야함 말은 쉽지 구현은 어렵다.


python extend는 None을 리턴

min, max를 사용할 시 return 값이 없고 none 값이 들어가면 에러 발생


# heap 잘 모름



빈 arr만들때 false 로 채우는게 좋은가 0으로 채우는게 좋은가?

정수론 : 모듈러 연산, => 최대공약수 or 서로소 찾기, 아 이건 생각도 못했네

완탐 문제인데 효율성이 있는지 없는지 모르면, 메모이제이션을 염두해 두고 코딩, 효율성이 딱 나올 줄 누가 알음...





완그디, DS, SS, GRAPH/Tree
MATH, hash

저울 추 문제? : 그리디?, dp, dfs => dp 저울은 큰 순서대로 정렬하고, 큰 거에서 작은 거로 각 저울 무게로 만들 수 있는 최대 추 값을 리턴함